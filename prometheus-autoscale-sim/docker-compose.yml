version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus_rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  webapp:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      - APP_NAME=webapp
      - FLASK_ENV=production
    ports:
      - "8000-8010:8000"
    networks:
      - monitoring
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  scaler:
    build:
      context: ./scaler
      dockerfile: Dockerfile
    container_name: scaler
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./ansible:/ansible:ro
      - ./docker-compose.yml:/docker-compose.yml:ro
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - SERVICE_NAME=webapp
      - SCALE_UP_THRESHOLD=0.6
      - SCALE_DOWN_THRESHOLD=0.2
      - MAX_REPLICAS=6
      - MIN_REPLICAS=1
      - CHECK_INTERVAL=10
      - DOCKER_HOST=unix:///var/run/docker.sock
      - COMPOSE_PROJECT_NAME=prometheus-autoscale-sim
    networks:
      - monitoring
    depends_on:
      prometheus:
        condition: service_healthy
      webapp:
        condition: service_healthy
    restart: unless-stopped
    command: ["python3", "/scaler/scaler.py"]

networks:
  monitoring:
    driver: bridge
    name: autoscale-network

volumes:
  prometheus-data:
    name: prometheus-data
  grafana-storage:
    name: grafana-storage
